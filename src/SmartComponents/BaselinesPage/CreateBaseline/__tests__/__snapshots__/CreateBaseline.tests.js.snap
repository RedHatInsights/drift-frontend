// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectedCreateBaseline should render correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(CreateBaseline))>
        <Connect(CreateBaseline)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
        >
          <CreateBaseline
            baselineData={Array []}
            createBaseline={[Function]}
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <EmptyState
              variant="full"
            >
              <div
                className="pf-c-empty-state"
              >
                <EmptyStateIcon
                  icon={[Function]}
                >
                  <CubesIcon
                    aria-hidden="true"
                    className="pf-c-empty-state__icon"
                    color="currentColor"
                    noVerticalAlign={false}
                    size="sm"
                    title={null}
                  >
                    <svg
                      aria-hidden="true"
                      aria-labelledby={null}
                      className="pf-c-empty-state__icon"
                      fill="currentColor"
                      height="1em"
                      role="img"
                      style={
                        Object {
                          "verticalAlign": "-0.125em",
                        }
                      }
                      viewBox="0 0 512 512"
                      width="1em"
                    >
                      <path
                        d="M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z"
                        transform=""
                      />
                    </svg>
                  </CubesIcon>
                </EmptyStateIcon>
                <Title
                  headingLevel="h5"
                  size="lg"
                >
                  <h5
                    className="pf-c-title pf-m-lg"
                  >
                    Create baseline
                  </h5>
                </Title>
                <EmptyStateBody>
                  <div
                    className="pf-c-empty-state__body"
                  >
                    Create a baseline name
                    <InputGroup>
                      <div
                        className="pf-c-input-group"
                      >
                        <ForwardRef
                          aria-label="baseline name"
                          onChange={[Function]}
                          type="text"
                          value=""
                        >
                          <TextInputBase
                            aria-label="baseline name"
                            className=""
                            innerRef={null}
                            isDisabled={false}
                            isReadOnly={false}
                            isRequired={false}
                            isValid={true}
                            onChange={[Function]}
                            type="text"
                            validated="default"
                            value=""
                          >
                            <input
                              aria-invalid={false}
                              aria-label="baseline name"
                              className="pf-c-form-control"
                              disabled={false}
                              onChange={[Function]}
                              readOnly={false}
                              required={false}
                              type="text"
                              value=""
                            />
                          </TextInputBase>
                        </ForwardRef>
                        <Component
                          onClick={[Function]}
                        >
                          <ComponentWithOuia
                            component={[Function]}
                            componentProps={
                              Object {
                                "children": "Submit",
                                "onClick": [Function],
                              }
                            }
                            consumerContext={null}
                          >
                            <Button
                              onClick={[Function]}
                              ouiaContext={
                                Object {
                                  "isOuia": false,
                                  "ouiaId": null,
                                }
                              }
                            >
                              <button
                                aria-disabled={null}
                                aria-label={null}
                                className="pf-c-button pf-m-primary"
                                disabled={false}
                                onClick={[Function]}
                                tabIndex={null}
                                type="button"
                              >
                                Submit
                              </button>
                            </Button>
                          </ComponentWithOuia>
                        </Component>
                      </div>
                    </InputGroup>
                  </div>
                </EmptyStateBody>
              </div>
            </EmptyState>
          </CreateBaseline>
        </Connect(CreateBaseline)>
      </withRouter(Connect(CreateBaseline))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`CreateBaseline should render correctly 1`] = `
<Fragment>
  <EmptyState
    variant="full"
  >
    <EmptyStateIcon
      icon={[Function]}
    />
    <Title
      headingLevel="h5"
      size="lg"
    >
      Create baseline
    </Title>
    <EmptyStateBody>
      Create a baseline name
      <InputGroup>
        <ForwardRef
          aria-label="baseline name"
          onChange={[Function]}
          type="text"
          value=""
        />
        <Component
          onClick={[Function]}
        >
          Submit
        </Component>
      </InputGroup>
    </EmptyStateBody>
  </EmptyState>
</Fragment>
`;
