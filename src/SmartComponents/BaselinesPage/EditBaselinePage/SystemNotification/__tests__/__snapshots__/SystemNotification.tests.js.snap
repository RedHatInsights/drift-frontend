// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectedSystemNotification should render correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    location={
      Object {
        "hash": "",
        "key": "default",
        "pathname": "/",
        "search": "",
        "state": null,
      }
    }
    navigationType="POP"
    navigator={
      Object {
        "action": "POP",
        "createHref": [Function],
        "createURL": [Function],
        "encodeLocation": [Function],
        "go": [Function],
        "index": 0,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "default",
          "pathname": "/",
          "search": "",
          "state": null,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(SystemNotification)
        fetchBaselineData={
          [MockFunction] {
            "calls": Array [
              Array [
                undefined,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        permissions={
          Object {
            "baselinesRead": true,
            "baselinesWrite": true,
            "inventoryRead": true,
          }
        }
      >
        <SystemNotification
          addNotifications={[Function]}
          deleteNotifications={[Function]}
          deleteNotificationsModalOpened={false}
          fetchBaselineData={
            [MockFunction] {
              "calls": Array [
                Array [
                  undefined,
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          getNotifications={[Function]}
          permissions={
            Object {
              "baselinesRead": true,
              "baselinesWrite": true,
              "inventoryRead": true,
            }
          }
          setSelectedSystemIds={[Function]}
          setSystemsToDelete={[Function]}
          systemNotificationIds={Array []}
          systemNotificationLoaded={true}
          systemsToDelete={Array []}
          toggleDeleteNotificationsModal={[Function]}
        >
          <DeleteNotificationModal
            deleteNotifications={[Function]}
            deleteNotificationsModalOpened={false}
            fetchSystems={[Function]}
            systemsToDelete={Array []}
            toggleDeleteNotificationsModal={[Function]}
          >
            <Modal
              actions={
                Array [
                  <Button
                    onClick={[Function]}
                    ouiaId="delete-baseline-notification-button"
                    variant="danger"
                  >
                    Delete
                  </Button>,
                  <Button
                    onClick={[Function]}
                    ouiaId="delete-baseline-notification-cancel-button"
                    variant="link"
                  >
                    Cancel
                  </Button>,
                ]
              }
              appendTo={[Function]}
              aria-describedby=""
              aria-label=""
              aria-labelledby=""
              className="drift"
              hasNoBodyWrapper={false}
              isOpen={false}
              onClose={[Function]}
              ouiaId="delete-baseline-notification-modal"
              ouiaSafe={true}
              showClose={true}
              title="Delete associated systems"
              titleIconVariant={null}
              titleLabel=""
              variant="small"
            >
              <Portal
                containerInfo={<div />}
              >
                <ModalContent
                  actions={
                    Array [
                      <Button
                        onClick={[Function]}
                        ouiaId="delete-baseline-notification-button"
                        variant="danger"
                      >
                        Delete
                      </Button>,
                      <Button
                        onClick={[Function]}
                        ouiaId="delete-baseline-notification-cancel-button"
                        variant="link"
                      >
                        Cancel
                      </Button>,
                    ]
                  }
                  aria-describedby=""
                  aria-label=""
                  aria-labelledby=""
                  boxId="pf-modal-part-0"
                  className="drift"
                  descriptorId="pf-modal-part-2"
                  hasNoBodyWrapper={false}
                  isOpen={false}
                  labelId="pf-modal-part-1"
                  onClose={[Function]}
                  ouiaId="delete-baseline-notification-modal"
                  ouiaSafe={true}
                  showClose={true}
                  title="Delete associated systems"
                  titleIconVariant={null}
                  titleLabel=""
                  variant="small"
                />
              </Portal>
            </Modal>
          </DeleteNotificationModal>
          <Modal
            actions={
              Array [
                <Button
                  onClick={[Function]}
                  ouiaId="add-baseline-notification-button"
                  variant="primary"
                >
                  Submit
                </Button>,
                <Button
                  onClick={[Function]}
                  ouiaId="add-baseline-notification-cancel-button"
                  variant="link"
                >
                  Cancel
                </Button>,
              ]
            }
            appendTo={[Function]}
            aria-describedby=""
            aria-label=""
            aria-labelledby=""
            className="drift"
            hasNoBodyWrapper={false}
            isOpen={false}
            onClose={[Function]}
            ouiaId="add-baseline-notification-modal"
            ouiaSafe={true}
            showClose={true}
            title="Associate system with undefined"
            titleIconVariant={null}
            titleLabel=""
            variant="medium"
            width="1200px"
          >
            <Portal
              containerInfo={<div />}
            >
              <ModalContent
                actions={
                  Array [
                    <Button
                      onClick={[Function]}
                      ouiaId="add-baseline-notification-button"
                      variant="primary"
                    >
                      Submit
                    </Button>,
                    <Button
                      onClick={[Function]}
                      ouiaId="add-baseline-notification-cancel-button"
                      variant="link"
                    >
                      Cancel
                    </Button>,
                  ]
                }
                aria-describedby=""
                aria-label=""
                aria-labelledby=""
                boxId="pf-modal-part-1"
                className="drift"
                descriptorId="pf-modal-part-3"
                hasNoBodyWrapper={false}
                isOpen={false}
                labelId="pf-modal-part-2"
                onClose={[Function]}
                ouiaId="add-baseline-notification-modal"
                ouiaSafe={true}
                showClose={true}
                title="Associate system with undefined"
                titleIconVariant={null}
                titleLabel=""
                variant="medium"
                width="1200px"
              />
            </Portal>
          </Modal>
          <SystemsTableWithContext
            deleteNotifications={[Function]}
            hasMultiSelect={true}
            onSystemSelect={[Function]}
            permissions={
              Object {
                "baselinesRead": true,
                "baselinesWrite": true,
                "inventoryRead": true,
              }
            }
            selectVariant="checkbox"
            systemColumns={
              Array [
                Object {
                  "key": "display_name",
                  "props": Object {
                    "width": null,
                  },
                  "title": "Name",
                },
                Object {
                  "key": "tags",
                  "props": Object {
                    "isStatic": true,
                    "width": null,
                  },
                  "title": "Tags",
                },
                Object {
                  "key": "updated",
                  "props": Object {
                    "width": null,
                  },
                  "title": "Last seen",
                },
              ]
            }
            systemNotificationIds={Array []}
            toolbarButton={
              <Button
                onClick={[Function]}
                ouiaId="add-baseline-notification-button"
                variant="primary"
              >
                Add associated system
              </Button>
            }
          >
            <Provider
              store={
                Object {
                  "@@observable": [Function],
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                }
              }
            >
              <Connect(Component)
                addNewListener={[Function]}
                deleteNotifications={[Function]}
                hasMultiSelect={true}
                onSystemSelect={[Function]}
                permissions={
                  Object {
                    "baselinesRead": true,
                    "baselinesWrite": true,
                    "inventoryRead": true,
                  }
                }
                registry={
                  ReducerRegistry {
                    "reducers": Object {},
                    "store": Object {
                      "@@observable": [Function],
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
                selectVariant="checkbox"
                selectedSystemIds={Array []}
                systemColumns={
                  Array [
                    Object {
                      "key": "display_name",
                      "props": Object {
                        "width": null,
                      },
                      "title": "Name",
                    },
                    Object {
                      "key": "tags",
                      "props": Object {
                        "isStatic": true,
                        "width": null,
                      },
                      "title": "Tags",
                    },
                    Object {
                      "key": "updated",
                      "props": Object {
                        "width": null,
                      },
                      "title": "Last seen",
                    },
                  ]
                }
                systemNotificationIds={Array []}
                toolbarButton={
                  <Button
                    onClick={[Function]}
                    ouiaId="add-baseline-notification-button"
                    variant="primary"
                  >
                    Add associated system
                  </Button>
                }
              >
                <Component
                  addNewListener={[Function]}
                  deleteNotifications={[Function]}
                  driftClearFilters={[Function]}
                  hasMultiSelect={true}
                  onSystemSelect={[Function]}
                  permissions={
                    Object {
                      "baselinesRead": true,
                      "baselinesWrite": true,
                      "inventoryRead": true,
                    }
                  }
                  registry={
                    ReducerRegistry {
                      "reducers": Object {},
                      "store": Object {
                        "@@observable": [Function],
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                  selectEntities={[Function]}
                  selectVariant="checkbox"
                  selectedSystemIds={Array []}
                  setSelectedSystemIds={[Function]}
                  systemColumns={
                    Array [
                      Object {
                        "key": "display_name",
                        "props": Object {
                          "width": null,
                        },
                        "title": "Name",
                      },
                      Object {
                        "key": "tags",
                        "props": Object {
                          "isStatic": true,
                          "width": null,
                        },
                        "title": "Tags",
                      },
                      Object {
                        "key": "updated",
                        "props": Object {
                          "width": null,
                        },
                        "title": "Last seen",
                      },
                    ]
                  }
                  systemNotificationIds={Array []}
                  toolbarButton={
                    <Button
                      onClick={[Function]}
                      ouiaId="add-baseline-notification-button"
                      variant="primary"
                    >
                      Add associated system
                    </Button>
                  }
                >
                  <mockConstructor
                    actionsConfig={
                      Object {
                        "actions": Array [],
                      }
                    }
                    bulkSelect={
                      Object {
                        "checked": null,
                        "count": 0,
                        "isDisabled": true,
                        "items": Array [
                          Object {
                            "onClick": [Function],
                            "title": "Select none (0)",
                          },
                          Object {
                            "onClick": [Function],
                            "title": "Select page (0)",
                          },
                        ],
                        "onSelect": [Function],
                      }
                    }
                    columns={
                      Array [
                        Object {
                          "key": "display_name",
                          "props": Object {
                            "width": null,
                          },
                          "title": "Name",
                        },
                        Object {
                          "key": "tags",
                          "props": Object {
                            "isStatic": true,
                            "width": null,
                          },
                          "title": "Tags",
                        },
                        Object {
                          "key": "updated",
                          "props": Object {
                            "width": null,
                          },
                          "title": "Last seen",
                        },
                      ]
                    }
                    customFilters={
                      Object {
                        "filter": Object {
                          "system_profile": Object {},
                        },
                        "tags": undefined,
                      }
                    }
                    getEntities={[Function]}
                    noDetail={true}
                    onLoad={[Function]}
                    showTags={true}
                    tableProps={
                      Object {
                        "canSelectAll": false,
                        "isStickyHeader": true,
                        "onSelect": false,
                        "ouiaId": "systems-table",
                        "selectVariant": "checkbox",
                      }
                    }
                  >
                    <div
                      className="testInventroyComponentChild"
                    >
                      <div>
                        This is child
                      </div>
                    </div>
                  </mockConstructor>
                </Component>
              </Connect(Component)>
            </Provider>
          </SystemsTableWithContext>
        </SystemNotification>
      </Connect(SystemNotification)>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`SystemNotification should render 1`] = `
<Fragment>
  <EmptyStateDisplay
    color="#6a6e73"
    icon={[Function]}
    text={
      Array [
        "Contact your organization administrator(s) for more information.",
      ]
    }
    title="You do not have access to Baselines"
  />
</Fragment>
`;
