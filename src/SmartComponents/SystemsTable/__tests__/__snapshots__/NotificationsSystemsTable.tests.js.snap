// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectedNotificationsSystemsTable should render correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    location={
      Object {
        "hash": "",
        "key": "default",
        "pathname": "/",
        "search": "",
        "state": null,
      }
    }
    navigationType="POP"
    navigator={
      Object {
        "action": "POP",
        "createHref": [Function],
        "createURL": [Function],
        "encodeLocation": [Function],
        "go": [Function],
        "index": 0,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "default",
          "pathname": "/",
          "search": "",
          "state": null,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <SystemsTableWithContext
        permissions={
          Object {
            "inventoryRead": true,
            "notificationsWrite": true,
          }
        }
        toolbarButton={
          <Button
            isDisabled={false}
            onClick={[MockFunction]}
            ouiaId="add-baseline-notification-button"
            variant="primary"
          >
            Add system
          </Button>
        }
      >
        <Provider
          store={
            Object {
              "@@observable": [Function],
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <Connect(Component)
            addNewListener={[Function]}
            permissions={
              Object {
                "inventoryRead": true,
                "notificationsWrite": true,
              }
            }
            registry={
              ReducerRegistry {
                "reducers": Object {},
                "store": Object {
                  "@@observable": [Function],
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              }
            }
            selectedSystemIds={Array []}
            toolbarButton={
              <Button
                isDisabled={false}
                onClick={[MockFunction]}
                ouiaId="add-baseline-notification-button"
                variant="primary"
              >
                Add system
              </Button>
            }
          >
            <Component
              addNewListener={[Function]}
              driftClearFilters={[Function]}
              permissions={
                Object {
                  "inventoryRead": true,
                  "notificationsWrite": true,
                }
              }
              registry={
                ReducerRegistry {
                  "reducers": Object {},
                  "store": Object {
                    "@@observable": [Function],
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                }
              }
              selectEntities={[Function]}
              selectedSystemIds={Array []}
              setSelectedSystemIds={[Function]}
              toolbarButton={
                <Button
                  isDisabled={false}
                  onClick={[MockFunction]}
                  ouiaId="add-baseline-notification-button"
                  variant="primary"
                >
                  Add system
                </Button>
              }
            >
              <mockConstructor
                actionsConfig={
                  Object {
                    "actions": Array [
                      <Button
                        isDisabled={false}
                        onClick={[MockFunction]}
                        ouiaId="add-baseline-notification-button"
                        variant="primary"
                      >
                        Add system
                      </Button>,
                      Object {
                        "label": "Delete associated system",
                        "onClick": [Function],
                        "props": Object {
                          "className": "pointer",
                          "isDisabled": true,
                          "key": "delete-baseline-notification",
                        },
                      },
                    ],
                  }
                }
                bulkSelect={
                  Object {
                    "checked": null,
                    "count": 0,
                    "isDisabled": true,
                    "items": Array [
                      Object {
                        "onClick": [Function],
                        "title": "Select none (0)",
                      },
                      Object {
                        "onClick": [Function],
                        "title": "Select page (0)",
                      },
                    ],
                    "onSelect": [Function],
                  }
                }
                customFilters={
                  Object {
                    "filter": Object {
                      "system_profile": Object {},
                    },
                    "tags": undefined,
                  }
                }
                getEntities={[Function]}
                noDetail={true}
                onLoad={[Function]}
                showTags={true}
                tableProps={
                  Object {
                    "canSelectAll": false,
                    "isStickyHeader": true,
                    "ouiaId": "systems-table",
                    "selectVariant": undefined,
                  }
                }
              >
                <div
                  className="testInventroyComponentChild"
                >
                  <div>
                    This is child
                  </div>
                </div>
              </mockConstructor>
            </Component>
          </Connect(Component)>
        </Provider>
      </SystemsTableWithContext>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`ConnectedNotificationsSystemsTable should render correctly with no inventoryWrite permissions 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    location={
      Object {
        "hash": "",
        "key": "default",
        "pathname": "/",
        "search": "",
        "state": null,
      }
    }
    navigationType="POP"
    navigator={
      Object {
        "action": "POP",
        "createHref": [Function],
        "createURL": [Function],
        "encodeLocation": [Function],
        "go": [Function],
        "index": 0,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "default",
          "pathname": "/",
          "search": "",
          "state": null,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <SystemsTableWithContext
        permissions={
          Object {
            "inventoryRead": true,
            "notificationsWrite": false,
          }
        }
        toolbarButton={
          <Button
            isDisabled={false}
            onClick={[MockFunction]}
            ouiaId="add-baseline-notification-button"
            variant="primary"
          >
            Add system
          </Button>
        }
      >
        <Provider
          store={
            Object {
              "@@observable": [Function],
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <Connect(Component)
            addNewListener={[Function]}
            permissions={
              Object {
                "inventoryRead": true,
                "notificationsWrite": false,
              }
            }
            registry={
              ReducerRegistry {
                "reducers": Object {},
                "store": Object {
                  "@@observable": [Function],
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              }
            }
            selectedSystemIds={Array []}
            toolbarButton={
              <Button
                isDisabled={false}
                onClick={[MockFunction]}
                ouiaId="add-baseline-notification-button"
                variant="primary"
              >
                Add system
              </Button>
            }
          >
            <Component
              addNewListener={[Function]}
              driftClearFilters={[Function]}
              permissions={
                Object {
                  "inventoryRead": true,
                  "notificationsWrite": false,
                }
              }
              registry={
                ReducerRegistry {
                  "reducers": Object {},
                  "store": Object {
                    "@@observable": [Function],
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                }
              }
              selectEntities={[Function]}
              selectedSystemIds={Array []}
              setSelectedSystemIds={[Function]}
              toolbarButton={
                <Button
                  isDisabled={false}
                  onClick={[MockFunction]}
                  ouiaId="add-baseline-notification-button"
                  variant="primary"
                >
                  Add system
                </Button>
              }
            >
              <mockConstructor
                actionsConfig={
                  Object {
                    "actions": Array [],
                  }
                }
                bulkSelect={
                  Object {
                    "checked": null,
                    "count": 0,
                    "isDisabled": true,
                    "items": Array [
                      Object {
                        "onClick": [Function],
                        "title": "Select none (0)",
                      },
                      Object {
                        "onClick": [Function],
                        "title": "Select page (0)",
                      },
                    ],
                    "onSelect": [Function],
                  }
                }
                customFilters={
                  Object {
                    "filter": Object {
                      "system_profile": Object {},
                    },
                    "tags": undefined,
                  }
                }
                getEntities={[Function]}
                noDetail={true}
                onLoad={[Function]}
                showTags={true}
                tableProps={
                  Object {
                    "canSelectAll": false,
                    "isStickyHeader": true,
                    "onSelect": false,
                    "ouiaId": "systems-table",
                    "selectVariant": undefined,
                  }
                }
              >
                <div
                  className="testInventroyComponentChild"
                >
                  <div>
                    This is child
                  </div>
                </div>
              </mockConstructor>
            </Component>
          </Connect(Component)>
        </Provider>
      </SystemsTableWithContext>
    </Provider>
  </Router>
</MemoryRouter>
`;
