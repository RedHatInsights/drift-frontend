// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectedDriftPage should render correctly 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(DriftPage))>
        <Connect(DriftPage)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
        >
          <DriftPage
            baselines={Array []}
            clearSelectedBaselines={[Function]}
            error={Object {}}
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            loading={false}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            systems={Array []}
            toggleErrorAlert={[Function]}
          >
            <PageHeader>
              <section
                className="pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light"
                widget-type="InsightsPageHeader"
              >
                <PageHeaderTitle
                  title="System Comparison"
                >
                  <Title
                    className=""
                    size="2xl"
                    widget-type="InsightsPageHeaderTitle"
                  >
                    <h1
                      className="pf-c-title pf-m-2xl"
                      widget-type="InsightsPageHeaderTitle"
                    >
                       
                      System Comparison
                       
                    </h1>
                  </Title>
                </PageHeaderTitle>
              </section>
            </PageHeader>
            <Connect(Main)>
              <Main>
                <section
                  className="pf-l-page__main-section pf-c-page__main-section"
                  page-type=""
                >
                  <withRouter(Connect(ErrorAlert))>
                    <Connect(ErrorAlert)
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <ErrorAlert
                        error={Object {}}
                        fullCompareData={Array []}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        revertCompareData={[Function]}
                        toggleModal={[Function]}
                      />
                    </Connect(ErrorAlert)>
                  </withRouter(Connect(ErrorAlert))>
                  <Card
                    className="pf-t-light pf-m-opaque-100"
                  >
                    <article
                      className="pf-c-card pf-t-light pf-m-opaque-100"
                    >
                      <CardBody>
                        <div
                          className="pf-c-card__body"
                        >
                          <div>
                            <withRouter(Connect(DriftTable))>
                              <Connect(DriftTable)
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                              >
                                <DriftTable
                                  addStateFilter={[Function]}
                                  baselines={Array []}
                                  clearState={[Function]}
                                  expandRow={[Function]}
                                  fetchCompare={[Function]}
                                  fullCompareData={Array []}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  hspIds={Array []}
                                  loading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  selectHistoricProfile={[Function]}
                                  selectedHSPIds={Array []}
                                  setSelectedBaselines={[Function]}
                                  stateFilters={
                                    Array [
                                      Object {
                                        "display": "Same",
                                        "filter": "SAME",
                                        "selected": true,
                                      },
                                      Object {
                                        "display": "Different",
                                        "filter": "DIFFERENT",
                                        "selected": true,
                                      },
                                      Object {
                                        "display": "Incomplete data",
                                        "filter": "INCOMPLETE_DATA",
                                        "selected": true,
                                      },
                                    ]
                                  }
                                  systems={Array []}
                                  toggleFactSort={[Function]}
                                  toggleStateSort={[Function]}
                                >
                                  <withCookies(Connect(AddSystemModal))
                                    confirmModal={[Function]}
                                    selectedSystemIds={Array []}
                                  >
                                    <withCookies(Connect(AddSystemModal))
                                      confirmModal={[Function]}
                                      cookies={
                                        Cookies {
                                          "HAS_DOCUMENT_COOKIE": true,
                                          "changeListeners": Array [
                                            [Function],
                                          ],
                                          "cookies": Object {},
                                        }
                                      }
                                      forwardedRef={null}
                                      selectedSystemIds={Array []}
                                    >
                                      <Connect(AddSystemModal)
                                        allCookies={Object {}}
                                        confirmModal={[Function]}
                                        cookies={
                                          Cookies {
                                            "HAS_DOCUMENT_COOKIE": true,
                                            "changeListeners": Array [
                                              [Function],
                                            ],
                                            "cookies": Object {},
                                          }
                                        }
                                        selectedSystemIds={Array []}
                                      >
                                        <AddSystemModal
                                          addSystemModalOpened={false}
                                          allCookies={Object {}}
                                          baselines={Array []}
                                          confirmModal={[Function]}
                                          cookies={
                                            Cookies {
                                              "HAS_DOCUMENT_COOKIE": true,
                                              "changeListeners": Array [
                                                [Function],
                                              ],
                                              "cookies": Object {},
                                            }
                                          }
                                          selectActiveTab={[Function]}
                                          selectedBaselineIds={Array []}
                                          selectedHSPIds={Array []}
                                          selectedSystemIds={Array []}
                                          systems={Array []}
                                          toggleModal={[Function]}
                                        >
                                          <Modal
                                            actions={
                                              Array [
                                                <Unknown
                                                  onClick={[Function]}
                                                  variant="primary"
                                                >
                                                  Submit
                                                </Unknown>,
                                              ]
                                            }
                                            appendTo={
                                              <body>
                                                <div />
                                              </body>
                                            }
                                            ariaDescribedById=""
                                            className=""
                                            hideTitle={false}
                                            isFooterLeftAligned={true}
                                            isLarge={false}
                                            isOpen={false}
                                            isSmall={false}
                                            onClose={[Function]}
                                            showClose={true}
                                            title="Choose systems"
                                            width="auto"
                                          >
                                            <Portal
                                              containerInfo={<div />}
                                            >
                                              <ModalContent
                                                actions={
                                                  Array [
                                                    <Unknown
                                                      onClick={[Function]}
                                                      variant="primary"
                                                    >
                                                      Submit
                                                    </Unknown>,
                                                  ]
                                                }
                                                ariaDescribedById=""
                                                className=""
                                                hideTitle={false}
                                                id="pf-modal-0"
                                                isFooterLeftAligned={true}
                                                isLarge={false}
                                                isOpen={false}
                                                isSmall={false}
                                                onClose={[Function]}
                                                showClose={true}
                                                title="Choose systems"
                                                width="auto"
                                              />
                                            </Portal>
                                          </Modal>
                                        </AddSystemModal>
                                      </Connect(AddSystemModal)>
                                    </withCookies(Connect(AddSystemModal))>
                                  </withCookies(Connect(AddSystemModal))>
                                  <center>
                                    <EmptyState>
                                      <div
                                        className="pf-c-empty-state pf-m-lg"
                                      >
                                        <EmptyStateIcon
                                          icon={[Function]}
                                        >
                                          <PlusCircleIcon
                                            aria-hidden="true"
                                            className="pf-c-empty-state__icon"
                                            color="currentColor"
                                            noVerticalAlign={false}
                                            size="sm"
                                            title={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              aria-labelledby={null}
                                              className="pf-c-empty-state__icon"
                                              fill="currentColor"
                                              height="1em"
                                              role="img"
                                              style={
                                                Object {
                                                  "verticalAlign": "-0.125em",
                                                }
                                              }
                                              viewBox="0 0 512 512"
                                              width="1em"
                                            >
                                              <path
                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
                                                transform=""
                                              />
                                            </svg>
                                          </PlusCircleIcon>
                                        </EmptyStateIcon>
                                        <br />
                                        <Title
                                          size="lg"
                                        >
                                          <h1
                                            className="pf-c-title pf-m-lg"
                                          >
                                            Add systems or baselines to compare
                                          </h1>
                                        </Title>
                                        <EmptyStateBody>
                                          <div
                                            className="pf-c-empty-state__body"
                                          >
                                            You currently have no systems or baselines displayed. Add at least two
                                            <br />
                                            systems or baselines to compare their facts.
                                          </div>
                                        </EmptyStateBody>
                                        <Connect(AddSystemButton)
                                          isTable={false}
                                        >
                                          <AddSystemButton
                                            isTable={false}
                                            toggleAddSystemModal={[Function]}
                                          >
                                            <Component
                                              className="add-system-button"
                                              onClick={[Function]}
                                              variant="primary"
                                            >
                                              <ComponentWithOuia
                                                component={[Function]}
                                                componentProps={
                                                  Object {
                                                    "children": "Add systems or baselines",
                                                    "className": "add-system-button",
                                                    "onClick": [Function],
                                                    "variant": "primary",
                                                  }
                                                }
                                                consumerContext={null}
                                              >
                                                <Button
                                                  className="add-system-button"
                                                  onClick={[Function]}
                                                  ouiaContext={
                                                    Object {
                                                      "isOuia": false,
                                                      "ouiaId": null,
                                                    }
                                                  }
                                                  variant="primary"
                                                >
                                                  <button
                                                    aria-disabled={null}
                                                    aria-label={null}
                                                    className="pf-c-button pf-m-primary add-system-button"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    tabIndex={null}
                                                    type="button"
                                                  >
                                                    Add systems or baselines
                                                  </button>
                                                </Button>
                                              </ComponentWithOuia>
                                            </Component>
                                          </AddSystemButton>
                                        </Connect(AddSystemButton)>
                                      </div>
                                    </EmptyState>
                                  </center>
                                </DriftTable>
                              </Connect(DriftTable)>
                            </withRouter(Connect(DriftTable))>
                          </div>
                        </div>
                      </CardBody>
                    </article>
                  </Card>
                </section>
              </Main>
            </Connect(Main)>
          </DriftPage>
        </Connect(DriftPage)>
      </withRouter(Connect(DriftPage))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`ConnectedDriftPage should render with error alert 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(DriftPage))>
        <Connect(DriftPage)
          history={
            Object {
              "action": "POP",
              "block": [Function],
              "canGo": [Function],
              "createHref": [Function],
              "entries": Array [
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
              ],
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "index": 0,
              "length": 1,
              "listen": [Function],
              "location": Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              "push": [Function],
              "replace": [Function],
            }
          }
          location={
            Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            }
          }
          match={
            Object {
              "isExact": true,
              "params": Object {},
              "path": "/",
              "url": "/",
            }
          }
        >
          <DriftPage
            baselines={Array []}
            clearSelectedBaselines={[Function]}
            error={
              Object {
                "detail": "something",
              }
            }
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            loading={false}
            location={
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            systems={Array []}
            toggleErrorAlert={[Function]}
          >
            <PageHeader>
              <section
                className="pf-l-page-header pf-c-page-header pf-l-page__main-section pf-c-page__main-section pf-m-light"
                widget-type="InsightsPageHeader"
              >
                <PageHeaderTitle
                  title="System Comparison"
                >
                  <Title
                    className=""
                    size="2xl"
                    widget-type="InsightsPageHeaderTitle"
                  >
                    <h1
                      className="pf-c-title pf-m-2xl"
                      widget-type="InsightsPageHeaderTitle"
                    >
                       
                      System Comparison
                       
                    </h1>
                  </Title>
                </PageHeaderTitle>
              </section>
            </PageHeader>
            <Connect(Main)>
              <Main>
                <section
                  className="pf-l-page__main-section pf-c-page__main-section"
                  page-type=""
                >
                  <withRouter(Connect(ErrorAlert))>
                    <Connect(ErrorAlert)
                      history={
                        Object {
                          "action": "POP",
                          "block": [Function],
                          "canGo": [Function],
                          "createHref": [Function],
                          "entries": Array [
                            Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                          ],
                          "go": [Function],
                          "goBack": [Function],
                          "goForward": [Function],
                          "index": 0,
                          "length": 1,
                          "listen": [Function],
                          "location": Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          "push": [Function],
                          "replace": [Function],
                        }
                      }
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      match={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                    >
                      <ErrorAlert
                        error={
                          Object {
                            "detail": "something",
                          }
                        }
                        fullCompareData={Array []}
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        revertCompareData={[Function]}
                        toggleModal={[Function]}
                      />
                    </Connect(ErrorAlert)>
                  </withRouter(Connect(ErrorAlert))>
                  <Card
                    className="pf-t-light pf-m-opaque-100"
                  >
                    <article
                      className="pf-c-card pf-t-light pf-m-opaque-100"
                    >
                      <CardBody>
                        <div
                          className="pf-c-card__body"
                        >
                          <div>
                            <withRouter(Connect(DriftTable))>
                              <Connect(DriftTable)
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                              >
                                <DriftTable
                                  addStateFilter={[Function]}
                                  baselines={Array []}
                                  clearState={[Function]}
                                  expandRow={[Function]}
                                  fetchCompare={[Function]}
                                  fullCompareData={Array []}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "pathname": "/",
                                          "search": "",
                                          "state": undefined,
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  hspIds={Array []}
                                  loading={false}
                                  location={
                                    Object {
                                      "hash": "",
                                      "pathname": "/",
                                      "search": "",
                                      "state": undefined,
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  selectHistoricProfile={[Function]}
                                  selectedHSPIds={Array []}
                                  setSelectedBaselines={[Function]}
                                  stateFilters={
                                    Array [
                                      Object {
                                        "display": "Same",
                                        "filter": "SAME",
                                        "selected": true,
                                      },
                                      Object {
                                        "display": "Different",
                                        "filter": "DIFFERENT",
                                        "selected": true,
                                      },
                                      Object {
                                        "display": "Incomplete data",
                                        "filter": "INCOMPLETE_DATA",
                                        "selected": true,
                                      },
                                    ]
                                  }
                                  systems={Array []}
                                  toggleFactSort={[Function]}
                                  toggleStateSort={[Function]}
                                >
                                  <withCookies(Connect(AddSystemModal))
                                    confirmModal={[Function]}
                                    selectedSystemIds={Array []}
                                  >
                                    <withCookies(Connect(AddSystemModal))
                                      confirmModal={[Function]}
                                      cookies={
                                        Cookies {
                                          "HAS_DOCUMENT_COOKIE": true,
                                          "changeListeners": Array [
                                            [Function],
                                            [Function],
                                          ],
                                          "cookies": Object {},
                                        }
                                      }
                                      forwardedRef={null}
                                      selectedSystemIds={Array []}
                                    >
                                      <Connect(AddSystemModal)
                                        allCookies={Object {}}
                                        confirmModal={[Function]}
                                        cookies={
                                          Cookies {
                                            "HAS_DOCUMENT_COOKIE": true,
                                            "changeListeners": Array [
                                              [Function],
                                              [Function],
                                            ],
                                            "cookies": Object {},
                                          }
                                        }
                                        selectedSystemIds={Array []}
                                      >
                                        <AddSystemModal
                                          addSystemModalOpened={false}
                                          allCookies={Object {}}
                                          baselines={Array []}
                                          confirmModal={[Function]}
                                          cookies={
                                            Cookies {
                                              "HAS_DOCUMENT_COOKIE": true,
                                              "changeListeners": Array [
                                                [Function],
                                                [Function],
                                              ],
                                              "cookies": Object {},
                                            }
                                          }
                                          selectActiveTab={[Function]}
                                          selectedBaselineIds={Array []}
                                          selectedHSPIds={Array []}
                                          selectedSystemIds={Array []}
                                          systems={Array []}
                                          toggleModal={[Function]}
                                        >
                                          <Modal
                                            actions={
                                              Array [
                                                <Unknown
                                                  onClick={[Function]}
                                                  variant="primary"
                                                >
                                                  Submit
                                                </Unknown>,
                                              ]
                                            }
                                            appendTo={
                                              <body>
                                                <div />
                                                <div />
                                              </body>
                                            }
                                            ariaDescribedById=""
                                            className=""
                                            hideTitle={false}
                                            isFooterLeftAligned={true}
                                            isLarge={false}
                                            isOpen={false}
                                            isSmall={false}
                                            onClose={[Function]}
                                            showClose={true}
                                            title="Choose systems"
                                            width="auto"
                                          >
                                            <Portal
                                              containerInfo={<div />}
                                            >
                                              <ModalContent
                                                actions={
                                                  Array [
                                                    <Unknown
                                                      onClick={[Function]}
                                                      variant="primary"
                                                    >
                                                      Submit
                                                    </Unknown>,
                                                  ]
                                                }
                                                ariaDescribedById=""
                                                className=""
                                                hideTitle={false}
                                                id="pf-modal-1"
                                                isFooterLeftAligned={true}
                                                isLarge={false}
                                                isOpen={false}
                                                isSmall={false}
                                                onClose={[Function]}
                                                showClose={true}
                                                title="Choose systems"
                                                width="auto"
                                              />
                                            </Portal>
                                          </Modal>
                                        </AddSystemModal>
                                      </Connect(AddSystemModal)>
                                    </withCookies(Connect(AddSystemModal))>
                                  </withCookies(Connect(AddSystemModal))>
                                  <center>
                                    <EmptyState>
                                      <div
                                        className="pf-c-empty-state pf-m-lg"
                                      >
                                        <EmptyStateIcon
                                          icon={[Function]}
                                        >
                                          <PlusCircleIcon
                                            aria-hidden="true"
                                            className="pf-c-empty-state__icon"
                                            color="currentColor"
                                            noVerticalAlign={false}
                                            size="sm"
                                            title={null}
                                          >
                                            <svg
                                              aria-hidden="true"
                                              aria-labelledby={null}
                                              className="pf-c-empty-state__icon"
                                              fill="currentColor"
                                              height="1em"
                                              role="img"
                                              style={
                                                Object {
                                                  "verticalAlign": "-0.125em",
                                                }
                                              }
                                              viewBox="0 0 512 512"
                                              width="1em"
                                            >
                                              <path
                                                d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"
                                                transform=""
                                              />
                                            </svg>
                                          </PlusCircleIcon>
                                        </EmptyStateIcon>
                                        <br />
                                        <Title
                                          size="lg"
                                        >
                                          <h1
                                            className="pf-c-title pf-m-lg"
                                          >
                                            Add systems or baselines to compare
                                          </h1>
                                        </Title>
                                        <EmptyStateBody>
                                          <div
                                            className="pf-c-empty-state__body"
                                          >
                                            You currently have no systems or baselines displayed. Add at least two
                                            <br />
                                            systems or baselines to compare their facts.
                                          </div>
                                        </EmptyStateBody>
                                        <Connect(AddSystemButton)
                                          isTable={false}
                                        >
                                          <AddSystemButton
                                            isTable={false}
                                            toggleAddSystemModal={[Function]}
                                          >
                                            <Component
                                              className="add-system-button"
                                              onClick={[Function]}
                                              variant="primary"
                                            >
                                              <ComponentWithOuia
                                                component={[Function]}
                                                componentProps={
                                                  Object {
                                                    "children": "Add systems or baselines",
                                                    "className": "add-system-button",
                                                    "onClick": [Function],
                                                    "variant": "primary",
                                                  }
                                                }
                                                consumerContext={null}
                                              >
                                                <Button
                                                  className="add-system-button"
                                                  onClick={[Function]}
                                                  ouiaContext={
                                                    Object {
                                                      "isOuia": false,
                                                      "ouiaId": null,
                                                    }
                                                  }
                                                  variant="primary"
                                                >
                                                  <button
                                                    aria-disabled={null}
                                                    aria-label={null}
                                                    className="pf-c-button pf-m-primary add-system-button"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    tabIndex={null}
                                                    type="button"
                                                  >
                                                    Add systems or baselines
                                                  </button>
                                                </Button>
                                              </ComponentWithOuia>
                                            </Component>
                                          </AddSystemButton>
                                        </Connect(AddSystemButton)>
                                      </div>
                                    </EmptyState>
                                  </center>
                                </DriftTable>
                              </Connect(DriftTable)>
                            </withRouter(Connect(DriftTable))>
                          </div>
                        </div>
                      </CardBody>
                    </article>
                  </Card>
                </section>
              </Main>
            </Connect(Main)>
          </DriftPage>
        </Connect(DriftPage)>
      </withRouter(Connect(DriftPage))>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`DriftPage should render correctly 1`] = `
<Fragment>
  <PageHeader>
    <PageHeaderTitle
      title="System Comparison"
    />
  </PageHeader>
  <Connect(Main)>
    <withRouter(Connect(ErrorAlert)) />
    <Card
      className="pf-t-light pf-m-opaque-100"
    >
      <CardBody>
        <div>
          <withRouter(Connect(DriftTable)) />
        </div>
      </CardBody>
    </Card>
  </Connect(Main)>
</Fragment>
`;
